From a4d53e7e76eda2858fbc96edef998ac40ec813e2 Mon Sep 17 00:00:00 2001
From: He Zhenhai <130278019+Youn-17@users.noreply.github.com>
Date: Thu, 7 Aug 2025 17:50:20 +0800
Subject: [PATCH] =?UTF-8?q?feat:=20=E6=B7=BB=E5=8A=A0=E5=A4=9A=E5=B9=B3?=
 =?UTF-8?q?=E5=8F=B0AI=20API=E5=AF=86=E9=92=A5=E7=AE=A1=E7=90=86=E5=8A=9F?=
 =?UTF-8?q?=E8=83=BD?=
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

- 创建ApiKeyManager组件支持DeepSeek、OpenAI、Claude、Gemini
- 实现API密钥验证和本地存储功能
- 修改AI分析服务使用用户输入的API密钥
- 在设置页面添加API配置选项
- 在分析页面添加API密钥检查提示
---
 src/components/ApiKeyManager.tsx | 412 +++++++++++++++++++++++++++++++
 src/hooks/useDeepSeek.ts         |  41 ++-
 src/pages/Analysis.tsx           |  37 ++-
 src/pages/Settings.tsx           |  17 +-
 src/services/aiService.ts        | 336 +++++++++++++++++++++++++
 src/services/metaAnalysisAI.ts   |  10 +-
 6 files changed, 833 insertions(+), 20 deletions(-)
 create mode 100644 src/components/ApiKeyManager.tsx
 create mode 100644 src/services/aiService.ts

diff --git a/src/components/ApiKeyManager.tsx b/src/components/ApiKeyManager.tsx
new file mode 100644
index 0000000..3bd3054
--- /dev/null
+++ b/src/components/ApiKeyManager.tsx
@@ -0,0 +1,412 @@
+import React, { useState, useEffect } from 'react';
+import { Key, Eye, EyeOff, Check, X, AlertCircle, Loader2 } from 'lucide-react';
+import { toast } from 'sonner';
+
+// API平台配置
+const API_PLATFORMS = {
+  deepseek: {
+    name: 'DeepSeek',
+    description: '深度求索AI平台，提供强大的文本分析能力',
+    placeholder: 'sk-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx',
+    testEndpoint: 'https://api.deepseek.com/v1/models',
+    icon: '🧠'
+  },
+  openai: {
+    name: 'OpenAI',
+    description: 'OpenAI GPT系列模型，支持多种AI任务',
+    placeholder: 'sk-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx',
+    testEndpoint: 'https://api.openai.com/v1/models',
+    icon: '🤖'
+  },
+  claude: {
+    name: 'Claude (Anthropic)',
+    description: 'Anthropic Claude模型，擅长分析和推理',
+    placeholder: 'sk-ant-xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx',
+    testEndpoint: 'https://api.anthropic.com/v1/models',
+    icon: '🎭'
+  },
+  gemini: {
+    name: 'Google Gemini',
+    description: 'Google Gemini模型，多模态AI能力',
+    placeholder: 'AIzaSyxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx',
+    testEndpoint: 'https://generativelanguage.googleapis.com/v1/models',
+    icon: '💎'
+  }
+};
+
+interface ApiKey {
+  platform: string;
+  key: string;
+  isValid?: boolean;
+  lastValidated?: string;
+}
+
+interface ApiKeyManagerProps {
+  onApiKeysChange?: (apiKeys: Record<string, ApiKey>) => void;
+}
+
+const ApiKeyManager: React.FC<ApiKeyManagerProps> = ({ onApiKeysChange }) => {
+  const [apiKeys, setApiKeys] = useState<Record<string, ApiKey>>({});
+  const [showKeys, setShowKeys] = useState<Record<string, boolean>>({});
+  const [validatingKeys, setValidatingKeys] = useState<Record<string, boolean>>({});
+  const [selectedPlatform, setSelectedPlatform] = useState<string>('deepseek');
+
+  // 从本地存储加载API密钥
+  useEffect(() => {
+    const savedKeys = localStorage.getItem('api_keys');
+    if (savedKeys) {
+      try {
+        const parsed = JSON.parse(savedKeys);
+        setApiKeys(parsed);
+      } catch (error) {
+        console.error('Failed to parse saved API keys:', error);
+      }
+    }
+  }, []);
+
+  // 保存API密钥到本地存储
+  const saveApiKeys = (keys: Record<string, ApiKey>) => {
+    localStorage.setItem('api_keys', JSON.stringify(keys));
+    setApiKeys(keys);
+    onApiKeysChange?.(keys);
+  };
+
+  // 验证API密钥
+  const validateApiKey = async (platform: string, key: string): Promise<boolean> => {
+    if (!key.trim()) return false;
+
+    setValidatingKeys(prev => ({ ...prev, [platform]: true }));
+
+    try {
+      const platformConfig = API_PLATFORMS[platform as keyof typeof API_PLATFORMS];
+      if (!platformConfig) return false;
+
+      // 根据不同平台使用不同的验证方法
+      let isValid = false;
+
+      switch (platform) {
+        case 'deepseek':
+          isValid = await validateDeepSeekKey(key);
+          break;
+        case 'openai':
+          isValid = await validateOpenAIKey(key);
+          break;
+        case 'claude':
+          isValid = await validateClaudeKey(key);
+          break;
+        case 'gemini':
+          isValid = await validateGeminiKey(key);
+          break;
+        default:
+          isValid = false;
+      }
+
+      return isValid;
+    } catch (error) {
+      console.error(`Failed to validate ${platform} API key:`, error);
+      return false;
+    } finally {
+      setValidatingKeys(prev => ({ ...prev, [platform]: false }));
+    }
+  };
+
+  // DeepSeek API密钥验证
+  const validateDeepSeekKey = async (key: string): Promise<boolean> => {
+    try {
+      const response = await fetch('https://api.deepseek.com/v1/models', {
+        headers: {
+          'Authorization': `Bearer ${key}`,
+          'Content-Type': 'application/json'
+        }
+      });
+      return response.ok;
+    } catch {
+      return false;
+    }
+  };
+
+  // OpenAI API密钥验证
+  const validateOpenAIKey = async (key: string): Promise<boolean> => {
+    try {
+      const response = await fetch('https://api.openai.com/v1/models', {
+        headers: {
+          'Authorization': `Bearer ${key}`,
+          'Content-Type': 'application/json'
+        }
+      });
+      return response.ok;
+    } catch {
+      return false;
+    }
+  };
+
+  // Claude API密钥验证
+  const validateClaudeKey = async (key: string): Promise<boolean> => {
+    try {
+      const response = await fetch('https://api.anthropic.com/v1/messages', {
+        method: 'POST',
+        headers: {
+          'x-api-key': key,
+          'Content-Type': 'application/json',
+          'anthropic-version': '2023-06-01'
+        },
+        body: JSON.stringify({
+          model: 'claude-3-haiku-20240307',
+          max_tokens: 1,
+          messages: [{ role: 'user', content: 'test' }]
+        })
+      });
+      return response.status !== 401;
+    } catch {
+      return false;
+    }
+  };
+
+  // Gemini API密钥验证
+  const validateGeminiKey = async (key: string): Promise<boolean> => {
+    try {
+      const response = await fetch(`https://generativelanguage.googleapis.com/v1/models?key=${key}`);
+      return response.ok;
+    } catch {
+      return false;
+    }
+  };
+
+  // 处理API密钥输入
+  const handleKeyChange = (platform: string, key: string) => {
+    const updatedKeys = {
+      ...apiKeys,
+      [platform]: {
+        platform,
+        key: key.trim(),
+        isValid: undefined,
+        lastValidated: undefined
+      }
+    };
+    saveApiKeys(updatedKeys);
+  };
+
+  // 验证并保存API密钥
+  const handleValidateKey = async (platform: string) => {
+    const key = apiKeys[platform]?.key;
+    if (!key) {
+      toast.error('请先输入API密钥');
+      return;
+    }
+
+    const isValid = await validateApiKey(platform, key);
+    const updatedKeys = {
+      ...apiKeys,
+      [platform]: {
+        ...apiKeys[platform],
+        isValid,
+        lastValidated: new Date().toISOString()
+      }
+    };
+
+    saveApiKeys(updatedKeys);
+
+    if (isValid) {
+      toast.success(`${API_PLATFORMS[platform as keyof typeof API_PLATFORMS].name} API密钥验证成功`);
+    } else {
+      toast.error(`${API_PLATFORMS[platform as keyof typeof API_PLATFORMS].name} API密钥验证失败`);
+    }
+  };
+
+  // 删除API密钥
+  const handleDeleteKey = (platform: string) => {
+    const updatedKeys = { ...apiKeys };
+    delete updatedKeys[platform];
+    saveApiKeys(updatedKeys);
+    toast.success('API密钥已删除');
+  };
+
+  // 切换密钥显示/隐藏
+  const toggleKeyVisibility = (platform: string) => {
+    setShowKeys(prev => ({ ...prev, [platform]: !prev[platform] }));
+  };
+
+  // 获取有效的API密钥数量
+  const getValidKeyCount = () => {
+    return Object.values(apiKeys).filter(key => key.isValid).length;
+  };
+
+  return (
+    <div className="space-y-6">
+      {/* 概览卡片 */}
+      <div className="bg-gradient-to-r from-blue-50 to-indigo-50 border border-blue-200 rounded-lg p-6">
+        <div className="flex items-center justify-between">
+          <div>
+            <h3 className="text-lg font-semibold text-blue-900 mb-2 flex items-center">
+              <Key className="h-5 w-5 mr-2" />
+              API密钥管理
+            </h3>
+            <p className="text-blue-700 text-sm">
+              配置您的AI平台API密钥以启用智能分析功能
+            </p>
+          </div>
+          <div className="text-right">
+            <div className="text-2xl font-bold text-blue-900">{getValidKeyCount()}</div>
+            <div className="text-sm text-blue-700">已配置平台</div>
+          </div>
+        </div>
+      </div>
+
+      {/* 平台选择 */}
+      <div className="bg-white rounded-lg shadow-sm border p-6">
+        <h4 className="font-medium text-gray-900 mb-4">选择AI平台</h4>
+        <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
+          {Object.entries(API_PLATFORMS).map(([key, platform]) => {
+            const apiKey = apiKeys[key];
+            const isSelected = selectedPlatform === key;
+            const hasKey = apiKey?.key;
+            const isValid = apiKey?.isValid;
+
+            return (
+              <button
+                key={key}
+                onClick={() => setSelectedPlatform(key)}
+                className={`p-4 border rounded-lg text-left transition-all ${
+                  isSelected
+                    ? 'border-blue-500 bg-blue-50 shadow-md'
+                    : 'border-gray-200 hover:border-gray-300 hover:bg-gray-50'
+                }`}
+              >
+                <div className="flex items-center justify-between mb-2">
+                  <div className="flex items-center">
+                    <span className="text-2xl mr-3">{platform.icon}</span>
+                    <span className="font-medium text-gray-900">{platform.name}</span>
+                  </div>
+                  {hasKey && (
+                    <div className="flex items-center">
+                      {isValid === true && <Check className="h-4 w-4 text-green-500" />}
+                      {isValid === false && <X className="h-4 w-4 text-red-500" />}
+                      {isValid === undefined && <AlertCircle className="h-4 w-4 text-yellow-500" />}
+                    </div>
+                  )}
+                </div>
+                <p className="text-sm text-gray-600">{platform.description}</p>
+              </button>
+            );
+          })}
+        </div>
+      </div>
+
+      {/* API密钥配置 */}
+      {selectedPlatform && (
+        <div className="bg-white rounded-lg shadow-sm border p-6">
+          <div className="flex items-center justify-between mb-4">
+            <h4 className="font-medium text-gray-900 flex items-center">
+              <span className="text-xl mr-2">
+                {API_PLATFORMS[selectedPlatform as keyof typeof API_PLATFORMS].icon}
+              </span>
+              配置 {API_PLATFORMS[selectedPlatform as keyof typeof API_PLATFORMS].name} API密钥
+            </h4>
+            {apiKeys[selectedPlatform]?.lastValidated && (
+              <span className="text-xs text-gray-500">
+                最后验证: {new Date(apiKeys[selectedPlatform].lastValidated!).toLocaleString()}
+              </span>
+            )}
+          </div>
+
+          <div className="space-y-4">
+            <div>
+              <label className="block text-sm font-medium text-gray-700 mb-2">
+                API密钥
+              </label>
+              <div className="relative">
+                <input
+                  type={showKeys[selectedPlatform] ? 'text' : 'password'}
+                  value={apiKeys[selectedPlatform]?.key || ''}
+                  onChange={(e) => handleKeyChange(selectedPlatform, e.target.value)}
+                  placeholder={API_PLATFORMS[selectedPlatform as keyof typeof API_PLATFORMS].placeholder}
+                  className="w-full border border-gray-300 rounded-lg px-3 py-2 pr-20 focus:ring-2 focus:ring-blue-500 focus:border-transparent"
+                />
+                <div className="absolute right-2 top-1/2 transform -translate-y-1/2 flex items-center space-x-2">
+                  <button
+                    type="button"
+                    onClick={() => toggleKeyVisibility(selectedPlatform)}
+                    className="text-gray-400 hover:text-gray-600"
+                  >
+                    {showKeys[selectedPlatform] ? <EyeOff className="h-4 w-4" /> : <Eye className="h-4 w-4" />}
+                  </button>
+                  {apiKeys[selectedPlatform]?.isValid === true && (
+                    <Check className="h-4 w-4 text-green-500" />
+                  )}
+                  {apiKeys[selectedPlatform]?.isValid === false && (
+                    <X className="h-4 w-4 text-red-500" />
+                  )}
+                </div>
+              </div>
+            </div>
+
+            <div className="flex items-center space-x-3">
+              <button
+                onClick={() => handleValidateKey(selectedPlatform)}
+                disabled={!apiKeys[selectedPlatform]?.key || validatingKeys[selectedPlatform]}
+                className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 disabled:bg-gray-400 disabled:cursor-not-allowed transition-colors flex items-center"
+              >
+                {validatingKeys[selectedPlatform] ? (
+                  <Loader2 className="h-4 w-4 mr-2 animate-spin" />
+                ) : (
+                  <Check className="h-4 w-4 mr-2" />
+                )}
+                {validatingKeys[selectedPlatform] ? '验证中...' : '验证密钥'}
+              </button>
+
+              {apiKeys[selectedPlatform]?.key && (
+                <button
+                  onClick={() => handleDeleteKey(selectedPlatform)}
+                  className="bg-red-600 text-white px-4 py-2 rounded-lg hover:bg-red-700 transition-colors flex items-center"
+                >
+                  <X className="h-4 w-4 mr-2" />
+                  删除密钥
+                </button>
+              )}
+            </div>
+
+            {/* 状态提示 */}
+            {apiKeys[selectedPlatform]?.isValid === false && (
+              <div className="bg-red-50 border border-red-200 rounded-lg p-3">
+                <div className="flex items-center">
+                  <AlertCircle className="h-4 w-4 text-red-500 mr-2" />
+                  <span className="text-sm text-red-700">
+                    API密钥验证失败，请检查密钥是否正确或网络连接是否正常
+                  </span>
+                </div>
+              </div>
+            )}
+
+            {apiKeys[selectedPlatform]?.isValid === true && (
+              <div className="bg-green-50 border border-green-200 rounded-lg p-3">
+                <div className="flex items-center">
+                  <Check className="h-4 w-4 text-green-500 mr-2" />
+                  <span className="text-sm text-green-700">
+                    API密钥验证成功，您现在可以使用 {API_PLATFORMS[selectedPlatform as keyof typeof API_PLATFORMS].name} 进行AI分析
+                  </span>
+                </div>
+              </div>
+            )}
+          </div>
+        </div>
+      )}
+
+      {/* 使用说明 */}
+      <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
+        <h4 className="font-medium text-yellow-900 mb-2 flex items-center">
+          <AlertCircle className="h-4 w-4 mr-2" />
+          重要说明
+        </h4>
+        <ul className="text-sm text-yellow-800 space-y-1">
+          <li>• API密钥仅存储在您的本地浏览器中，不会上传到服务器</li>
+          <li>• 请妥善保管您的API密钥，避免泄露给他人</li>
+          <li>• 不同AI平台的API密钥格式和获取方式可能不同</li>
+          <li>• 验证成功后才能在分析功能中使用对应的AI平台</li>
+          <li>• 建议定期更换API密钥以确保安全</li>
+        </ul>
+      </div>
+    </div>
+  );
+};
+
+export default ApiKeyManager;
\ No newline at end of file
diff --git a/src/hooks/useDeepSeek.ts b/src/hooks/useDeepSeek.ts
index 8b1e49f..50a8c3d 100644
--- a/src/hooks/useDeepSeek.ts
+++ b/src/hooks/useDeepSeek.ts
@@ -1,12 +1,13 @@
 import { useState, useCallback } from 'react';
 import { metaAnalysisAI, MetaAnalysisData, AnalysisResult } from '../services/metaAnalysisAI';
-import { deepSeekAPI } from '../services/deepseek';
+import { aiService } from '../services/aiService';
 
-interface UseDeepSeekReturn {
+interface UseAIReturn {
   // 状态
   isLoading: boolean;
   error: string | null;
   isConnected: boolean;
+  availablePlatforms: string[];
   
   // 方法
   checkConnection: () => Promise<boolean>;
@@ -15,12 +16,14 @@ interface UseDeepSeekReturn {
   interpretResults: (data: MetaAnalysisData) => Promise<AnalysisResult>;
   generateReport: (data: MetaAnalysisData, title: string) => Promise<string>;
   clearError: () => void;
+  hasValidApiKey: () => boolean;
 }
 
-export const useDeepSeek = (): UseDeepSeekReturn => {
+export const useAI = (): UseAIReturn => {
   const [isLoading, setIsLoading] = useState(false);
   const [error, setError] = useState<string | null>(null);
   const [isConnected, setIsConnected] = useState(false);
+  const [availablePlatforms, setAvailablePlatforms] = useState<string[]>([]);
 
   const clearError = useCallback(() => {
     setError(null);
@@ -31,18 +34,30 @@ export const useDeepSeek = (): UseDeepSeekReturn => {
     setError(null);
     
     try {
-      const connected = await deepSeekAPI.checkConnection();
-      setIsConnected(connected);
+      if (!aiService.hasValidApiKey()) {
+        setError('没有可用的AI平台API密钥，请先在设置中配置API密钥');
+        setIsConnected(false);
+        setAvailablePlatforms([]);
+        return false;
+      }
+
+      const platforms = aiService.getAvailablePlatforms();
+      setAvailablePlatforms(platforms);
+      
+      const connectionResults = await aiService.checkConnection();
+      const hasConnection = connectionResults.some(result => result.connected);
+      setIsConnected(hasConnection);
       
-      if (!connected) {
-        setError('无法连接到DeepSeek API，请检查网络连接和API密钥配置');
+      if (!hasConnection) {
+        setError('无法连接到任何AI平台，请检查网络连接和API密钥配置');
       }
       
-      return connected;
+      return hasConnection;
     } catch (err) {
       const errorMessage = err instanceof Error ? err.message : '连接检查失败';
       setError(errorMessage);
       setIsConnected(false);
+      setAvailablePlatforms([]);
       return false;
     } finally {
       setIsLoading(false);
@@ -113,16 +128,22 @@ export const useDeepSeek = (): UseDeepSeekReturn => {
     }
   }, []);
 
+  const hasValidApiKey = useCallback(() => {
+    return aiService.hasValidApiKey();
+  }, []);
+
   return {
     isLoading,
     error,
     isConnected,
+    availablePlatforms,
     checkConnection,
     assessDataQuality,
     recommendMethods,
     interpretResults,
     generateReport,
-    clearError
+    clearError,
+    hasValidApiKey
   };
 };
 
@@ -147,7 +168,7 @@ export const useAIConsultant = () => {
         }
       ];
       
-      const response = await deepSeekAPI.chatCompletion(messages);
+      const response = await aiService.chatCompletion(messages);
       return response.choices[0]?.message?.content || '抱歉，无法获取回答';
     } catch (err) {
       const errorMessage = err instanceof Error ? err.message : 'AI咨询失败';
diff --git a/src/pages/Analysis.tsx b/src/pages/Analysis.tsx
index e6c5197..358dbe0 100644
--- a/src/pages/Analysis.tsx
+++ b/src/pages/Analysis.tsx
@@ -15,7 +15,7 @@ import {
   Database
 } from 'lucide-react';
 import { useDatasets, useAnalyses } from '../hooks/useLocalStorage';
-import { useDeepSeek } from '../hooks/useDeepSeek';
+import { useAI } from '../hooks/useDeepSeek';
 import { toast } from 'sonner';
 
 interface AnalysisConfig {
@@ -34,8 +34,9 @@ const Analysis: React.FC = () => {
   const { 
     assessDataQuality, 
     interpretResults,
-    isLoading: aiLoading 
-  } = useDeepSeek();
+    isLoading: aiLoading,
+    hasValidApiKey
+  } = useAI();
   
   const [selectedDatasets, setSelectedDatasets] = useState<string[]>([]);
   const [analysisConfig, setAnalysisConfig] = useState<AnalysisConfig>({
@@ -51,6 +52,12 @@ const Analysis: React.FC = () => {
   const [qualityAssessment, setQualityAssessment] = useState<any>(null);
   const [methodRecommendations, setMethodRecommendations] = useState<any>(null);
   const [analysisResults, setAnalysisResults] = useState<any>(null);
+  const [hasApiKey, setHasApiKey] = useState(false);
+
+  // 检查API密钥状态
+  useEffect(() => {
+    setHasApiKey(hasValidApiKey());
+  }, [hasValidApiKey]);
 
   useEffect(() => {
     if (id) {
@@ -303,6 +310,28 @@ const Analysis: React.FC = () => {
           </div>
         </div>
 
+        {/* API密钥检查 */}
+        {!hasApiKey && (
+          <div className="bg-yellow-50 border border-yellow-200 rounded-lg p-6 mb-6">
+            <div className="flex items-center">
+              <AlertCircle className="h-6 w-6 text-yellow-600 mr-3" />
+              <div>
+                <h3 className="text-lg font-medium text-yellow-800">需要配置AI API密钥</h3>
+                <p className="text-yellow-700 mt-1">
+                  请先在设置中配置AI平台的API密钥，才能使用AI分析功能。
+                </p>
+                <Link 
+                  to="/settings" 
+                  className="inline-flex items-center mt-3 bg-yellow-600 text-white px-4 py-2 rounded-lg hover:bg-yellow-700 transition-colors"
+                >
+                  <Settings className="h-4 w-4 mr-2" />
+                  前往设置
+                </Link>
+              </div>
+            </div>
+          </div>
+        )}
+
         {/* 设置步骤 */}
         {analysisStep === 'setup' && (
           <div className="space-y-6">
@@ -421,7 +450,7 @@ const Analysis: React.FC = () => {
             <div className="flex justify-center">
               <button
                 onClick={startQualityAssessment}
-                disabled={selectedDatasets.length === 0 || aiLoading}
+                disabled={selectedDatasets.length === 0 || aiLoading || !hasApiKey}
                 className="bg-blue-600 text-white px-8 py-3 rounded-lg hover:bg-blue-700 transition-colors disabled:opacity-50 disabled:cursor-not-allowed flex items-center"
               >
                 {aiLoading ? (
diff --git a/src/pages/Settings.tsx b/src/pages/Settings.tsx
index 5447e07..9fb6482 100644
--- a/src/pages/Settings.tsx
+++ b/src/pages/Settings.tsx
@@ -14,11 +14,13 @@ import {
   Shield,
   Bell,
   HardDrive,
-  Info
+  Info,
+  Key
 } from 'lucide-react';
 import { useUserSettings, useDataManagement } from '../hooks/useLocalStorage';
 import { UserSettings } from '../types';
 import { toast } from 'sonner';
+import ApiKeyManager from '../components/ApiKeyManager';
 
 const Settings: React.FC = () => {
   const { settings, updateSettings, resetSettings } = useUserSettings();
@@ -108,6 +110,7 @@ const Settings: React.FC = () => {
 
   const tabs = [
     { id: 'general', name: '常规设置', icon: SettingsIcon },
+    { id: 'api', name: 'API配置', icon: Key },
     { id: 'appearance', name: '外观', icon: Palette },
     { id: 'data', name: '数据管理', icon: Database },
     { id: 'privacy', name: '隐私安全', icon: Shield },
@@ -269,6 +272,18 @@ const Settings: React.FC = () => {
               </div>
             )}
 
+            {activeTab === 'api' && (
+              <div className="space-y-6">
+                <div className="bg-white rounded-lg shadow-sm border p-6">
+                  <h2 className="text-xl font-semibold text-gray-900 mb-6">API配置</h2>
+                  <ApiKeyManager onApiKeysChange={(keys) => {
+                    // 可以在这里处理API密钥变化的回调
+                    console.log('API keys updated:', keys);
+                  }} />
+                </div>
+              </div>
+            )}
+
             {activeTab === 'appearance' && (
               <div className="space-y-6">
                 <div className="bg-white rounded-lg shadow-sm border p-6">
diff --git a/src/services/aiService.ts b/src/services/aiService.ts
new file mode 100644
index 0000000..31e6d1a
--- /dev/null
+++ b/src/services/aiService.ts
@@ -0,0 +1,336 @@
+interface ApiKey {
+  platform: string;
+  key: string;
+  isValid?: boolean;
+  lastValidated?: string;
+}
+
+interface ChatMessage {
+  role: 'system' | 'user' | 'assistant';
+  content: string;
+}
+
+interface ChatCompletionResponse {
+  id: string;
+  object: string;
+  created: number;
+  model: string;
+  choices: {
+    index: number;
+    message: ChatMessage;
+    finish_reason: string;
+  }[];
+  usage: {
+    prompt_tokens: number;
+    completion_tokens: number;
+    total_tokens: number;
+  };
+}
+
+interface AIServiceConfig {
+  maxTokens: number;
+  temperature: number;
+}
+
+class AIService {
+  private config: AIServiceConfig;
+
+  constructor() {
+    this.config = {
+      maxTokens: 2000,
+      temperature: 0.3
+    };
+  }
+
+  // 获取存储的API密钥
+  private getApiKeys(): Record<string, ApiKey> {
+    try {
+      const savedKeys = localStorage.getItem('api_keys');
+      return savedKeys ? JSON.parse(savedKeys) : {};
+    } catch {
+      return {};
+    }
+  }
+
+  // 获取有效的API密钥
+  private getValidApiKey(platform: string): string | null {
+    const apiKeys = this.getApiKeys();
+    const apiKey = apiKeys[platform];
+    
+    if (apiKey && apiKey.isValid && apiKey.key) {
+      return apiKey.key;
+    }
+    
+    return null;
+  }
+
+  // 检查是否有可用的AI平台
+  public hasValidApiKey(): boolean {
+    const apiKeys = this.getApiKeys();
+    return Object.values(apiKeys).some(key => key.isValid && key.key);
+  }
+
+  // 获取可用的AI平台列表
+  public getAvailablePlatforms(): string[] {
+    const apiKeys = this.getApiKeys();
+    return Object.keys(apiKeys).filter(platform => {
+      const key = apiKeys[platform];
+      return key.isValid && key.key;
+    });
+  }
+
+  // DeepSeek API调用
+  private async callDeepSeek(messages: ChatMessage[], apiKey: string): Promise<ChatCompletionResponse> {
+    const url = 'https://api.deepseek.com/v1/chat/completions';
+    
+    const requestBody = {
+      model: 'deepseek-chat',
+      messages,
+      temperature: this.config.temperature,
+      max_tokens: this.config.maxTokens
+    };
+
+    const response = await fetch(url, {
+      method: 'POST',
+      headers: {
+        'Content-Type': 'application/json',
+        'Authorization': `Bearer ${apiKey}`
+      },
+      body: JSON.stringify(requestBody)
+    });
+
+    if (!response.ok) {
+      const errorData = await response.json().catch(() => ({}));
+      throw new Error(`DeepSeek API请求失败: ${response.status} ${response.statusText} - ${JSON.stringify(errorData)}`);
+    }
+
+    return await response.json();
+  }
+
+  // OpenAI API调用
+  private async callOpenAI(messages: ChatMessage[], apiKey: string): Promise<ChatCompletionResponse> {
+    const url = 'https://api.openai.com/v1/chat/completions';
+    
+    const requestBody = {
+      model: 'gpt-3.5-turbo',
+      messages,
+      temperature: this.config.temperature,
+      max_tokens: this.config.maxTokens
+    };
+
+    const response = await fetch(url, {
+      method: 'POST',
+      headers: {
+        'Content-Type': 'application/json',
+        'Authorization': `Bearer ${apiKey}`
+      },
+      body: JSON.stringify(requestBody)
+    });
+
+    if (!response.ok) {
+      const errorData = await response.json().catch(() => ({}));
+      throw new Error(`OpenAI API请求失败: ${response.status} ${response.statusText} - ${JSON.stringify(errorData)}`);
+    }
+
+    return await response.json();
+  }
+
+  // Claude API调用
+  private async callClaude(messages: ChatMessage[], apiKey: string): Promise<ChatCompletionResponse> {
+    const url = 'https://api.anthropic.com/v1/messages';
+    
+    // 转换消息格式
+    const claudeMessages = messages.filter(msg => msg.role !== 'system').map(msg => ({
+      role: msg.role === 'assistant' ? 'assistant' : 'user',
+      content: msg.content
+    }));
+
+    const systemMessage = messages.find(msg => msg.role === 'system')?.content || '';
+
+    const requestBody = {
+      model: 'claude-3-haiku-20240307',
+      max_tokens: this.config.maxTokens,
+      temperature: this.config.temperature,
+      system: systemMessage,
+      messages: claudeMessages
+    };
+
+    const response = await fetch(url, {
+      method: 'POST',
+      headers: {
+        'Content-Type': 'application/json',
+        'x-api-key': apiKey,
+        'anthropic-version': '2023-06-01'
+      },
+      body: JSON.stringify(requestBody)
+    });
+
+    if (!response.ok) {
+      const errorData = await response.json().catch(() => ({}));
+      throw new Error(`Claude API请求失败: ${response.status} ${response.statusText} - ${JSON.stringify(errorData)}`);
+    }
+
+    const claudeResponse = await response.json();
+    
+    // 转换为统一格式
+    return {
+      id: claudeResponse.id,
+      object: 'chat.completion',
+      created: Date.now(),
+      model: claudeResponse.model,
+      choices: [{
+        index: 0,
+        message: {
+          role: 'assistant',
+          content: claudeResponse.content[0]?.text || ''
+        },
+        finish_reason: claudeResponse.stop_reason || 'stop'
+      }],
+      usage: {
+        prompt_tokens: claudeResponse.usage?.input_tokens || 0,
+        completion_tokens: claudeResponse.usage?.output_tokens || 0,
+        total_tokens: (claudeResponse.usage?.input_tokens || 0) + (claudeResponse.usage?.output_tokens || 0)
+      }
+    };
+  }
+
+  // Gemini API调用
+  private async callGemini(messages: ChatMessage[], apiKey: string): Promise<ChatCompletionResponse> {
+    const url = `https://generativelanguage.googleapis.com/v1beta/models/gemini-pro:generateContent?key=${apiKey}`;
+    
+    // 转换消息格式
+    const parts = messages.map(msg => ({
+      text: `${msg.role}: ${msg.content}`
+    }));
+
+    const requestBody = {
+      contents: [{
+        parts: parts
+      }],
+      generationConfig: {
+        temperature: this.config.temperature,
+        maxOutputTokens: this.config.maxTokens
+      }
+    };
+
+    const response = await fetch(url, {
+      method: 'POST',
+      headers: {
+        'Content-Type': 'application/json'
+      },
+      body: JSON.stringify(requestBody)
+    });
+
+    if (!response.ok) {
+      const errorData = await response.json().catch(() => ({}));
+      throw new Error(`Gemini API请求失败: ${response.status} ${response.statusText} - ${JSON.stringify(errorData)}`);
+    }
+
+    const geminiResponse = await response.json();
+    
+    // 转换为统一格式
+    return {
+      id: 'gemini-' + Date.now(),
+      object: 'chat.completion',
+      created: Date.now(),
+      model: 'gemini-pro',
+      choices: [{
+        index: 0,
+        message: {
+          role: 'assistant',
+          content: geminiResponse.candidates?.[0]?.content?.parts?.[0]?.text || ''
+        },
+        finish_reason: 'stop'
+      }],
+      usage: {
+        prompt_tokens: 0,
+        completion_tokens: 0,
+        total_tokens: 0
+      }
+    };
+  }
+
+  // 智能选择最佳可用平台进行API调用
+  public async chatCompletion(messages: ChatMessage[], preferredPlatform?: string): Promise<ChatCompletionResponse> {
+    const availablePlatforms = this.getAvailablePlatforms();
+    
+    if (availablePlatforms.length === 0) {
+      throw new Error('没有可用的AI平台API密钥，请先在设置中配置API密钥');
+    }
+
+    // 确定使用的平台
+    let platformToUse = preferredPlatform;
+    if (!platformToUse || !availablePlatforms.includes(platformToUse)) {
+      // 优先级：DeepSeek > OpenAI > Claude > Gemini
+      const priorityOrder = ['deepseek', 'openai', 'claude', 'gemini'];
+      platformToUse = priorityOrder.find(p => availablePlatforms.includes(p)) || availablePlatforms[0];
+    }
+
+    const apiKey = this.getValidApiKey(platformToUse);
+    if (!apiKey) {
+      throw new Error(`${platformToUse} API密钥无效`);
+    }
+
+    try {
+      switch (platformToUse) {
+        case 'deepseek':
+          return await this.callDeepSeek(messages, apiKey);
+        case 'openai':
+          return await this.callOpenAI(messages, apiKey);
+        case 'claude':
+          return await this.callClaude(messages, apiKey);
+        case 'gemini':
+          return await this.callGemini(messages, apiKey);
+        default:
+          throw new Error(`不支持的AI平台: ${platformToUse}`);
+      }
+    } catch (error) {
+      console.error(`${platformToUse} API调用失败:`, error);
+      
+      // 如果当前平台失败，尝试其他可用平台
+      const otherPlatforms = availablePlatforms.filter(p => p !== platformToUse);
+      if (otherPlatforms.length > 0) {
+        console.log(`尝试使用备用平台: ${otherPlatforms[0]}`);
+        return await this.chatCompletion(messages, otherPlatforms[0]);
+      }
+      
+      throw error;
+    }
+  }
+
+  // 检查API连接状态
+  public async checkConnection(platform?: string): Promise<{ platform: string; connected: boolean }[]> {
+    const availablePlatforms = platform ? [platform] : this.getAvailablePlatforms();
+    const results: { platform: string; connected: boolean }[] = [];
+
+    for (const platformName of availablePlatforms) {
+      try {
+        const response = await this.chatCompletion([
+          { role: 'user', content: '你好，请回复"连接成功"' }
+        ], platformName);
+        
+        const connected = response.choices[0]?.message?.content?.includes('连接成功') || 
+                         response.choices[0]?.message?.content?.length > 0;
+        
+        results.push({ platform: platformName, connected });
+      } catch {
+        results.push({ platform: platformName, connected: false });
+      }
+    }
+
+    return results;
+  }
+
+  // 更新配置
+  public updateConfig(config: Partial<AIServiceConfig>): void {
+    this.config = { ...this.config, ...config };
+  }
+
+  // 获取当前配置
+  public getConfig(): AIServiceConfig {
+    return { ...this.config };
+  }
+}
+
+export const aiService = new AIService();
+export type { ChatMessage, ChatCompletionResponse, AIServiceConfig };
\ No newline at end of file
diff --git a/src/services/metaAnalysisAI.ts b/src/services/metaAnalysisAI.ts
index 05b5192..b04d827 100644
--- a/src/services/metaAnalysisAI.ts
+++ b/src/services/metaAnalysisAI.ts
@@ -1,4 +1,4 @@
-import { deepSeekAPI, ChatMessage } from './deepseek';
+import { aiService, ChatMessage } from './aiService';
 
 interface MetaAnalysisData {
   studies: Array<{
@@ -66,7 +66,7 @@ ${data.studies.map(s => `- ${s.title}: n=${s.sampleSize}`).join('\n')}
     ];
 
     try {
-      const response = await deepSeekAPI.chatCompletion(messages);
+      const response = await aiService.chatCompletion(messages);
       return response.choices[0]?.message?.content || '数据质量评估失败';
     } catch (error) {
       console.error('数据质量评估错误:', error);
@@ -107,7 +107,7 @@ ${data.studies.map(s => `- ${s.title}: n=${s.sampleSize}`).join('\n')}
     ];
 
     try {
-      const response = await deepSeekAPI.chatCompletion(messages);
+      const response = await aiService.chatCompletion(messages);
       return response.choices[0]?.message?.content || '统计方法推荐失败';
     } catch (error) {
       console.error('统计方法推荐错误:', error);
@@ -151,7 +151,7 @@ ${data.studies.map(s => `- ${s.title}: n=${s.sampleSize}`).join('\n')}
     ];
 
     try {
-      const response = await deepSeekAPI.chatCompletion(messages);
+      const response = await aiService.chatCompletion(messages);
       const content = response.choices[0]?.message?.content || '';
       
       // 解析AI回复，提取不同部分
@@ -206,7 +206,7 @@ ${data.studies.map(s => `- ${s.title}: n=${s.sampleSize}`).join('\n')}
     ];
 
     try {
-      const response = await deepSeekAPI.chatCompletion(messages);
+      const response = await aiService.chatCompletion(messages);
       return response.choices[0]?.message?.content || '学术报告生成失败';
     } catch (error) {
       console.error('学术报告生成错误:', error);
-- 
2.39.5 (Apple Git-154)

